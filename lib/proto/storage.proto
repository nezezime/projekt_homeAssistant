//Protocol buffer specification for storaged rpc server
syntax = "proto2";

package databaseRPC;

//this will generate the dbRPC class that contains a client stub
//and two interfaces for server to implement with corresponding methods
service dbRPC
{
  rpc Hello (HelloRequest) returns (HelloReply) {}
  rpc GetUsers (GetUsersRequest) returns (GetUsersResponse) {}
  rpc UserLogin (UserLoginRequest) returns (UserLoginResponse) {}
  rpc GetMessages (GetMessagesRequest) returns (GetMessagesResponse) {}
  rpc PostMessage (PostMessageRequest) returns (PostMessageResponse) {}
}

message HelloRequest
{
  optional string name = 1;
  required int32 message_id = 2;
}

message HelloReply
{
  optional string message = 1;
  required int32 message_id = 2;
}

message GetUsersRequest
{
  required uint64 session_id = 1;
}

message GetUsersResponse
{
  message UserInfoBlock
  {
    required string user_name = 1;
    required int32 user_id = 2;
  }
  repeated UserInfoBlock user_info = 1;
}

message UserLoginRequest
{
  required string user_name = 1;
  required string password = 2;
}

message UserLoginResponse
{
  required int32 status_code = 1;
  optional uint64 session_id = 2;
  optional string reason = 3;
  optional int32 user_id = 4;
}

message GetMessagesRequest
{
  required int32 user_id = 1;
  optional uint64 from_time = 2;
}

message GetMessagesResponse
{
  message MessageBlock
  {
    required int32 message_id = 1;
    required uint64 message_timestamp = 2;
    required int32 author_id = 3;
    optional string author_name = 4;
    required string message_content = 5;
  }
  repeated MessageBlock message = 1;
}

message PostMessageRequest
{
  required uint64 session_id = 1;
  required int32 author_id = 2;
  optional string author_name = 3;
  optional int32 destination_id = 4;
  optional string destination_name = 5;
  required string message_content = 6;
}

message PostMessageResponse
{
  required int32 result = 1;
  optional string error_text = 2;
}
